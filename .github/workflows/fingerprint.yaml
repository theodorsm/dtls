## SPDX-FileCopyrightText: 2023 The Pion community <https://pion.ly>
## SPDX-License-Identifier: MIT

name: Fingerprinting
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
# on:
#   schedule:
#     - cron: "30 5 * * *"
#

jobs:
  handshake-capture:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        browser: [firefox, chrome]
        bver: ['stable']
    steps:
    - uses: actions/checkout@v3

    - name: Install tshark
      run: sudo apt install -y tshark

    - uses: actions/setup-node@v3

    - run: npm install
      working-directory: .github/workflows/fingerprinting

    - name: Install browser version
      run: BROWSER=${{matrix.browser}} BVER=${{matrix.bver}} ./node_modules/travis-multirunner/setup.sh
      working-directory: .github/workflows/fingerprinting

    - name: Remove preinstalled github chromedriver/geckodriver from $PATH
      run: sudo rm /usr/bin/chromedriver /usr/bin/geckodriver

    - run: Xvfb :99 &

    - name: Get browser version
      id: "browser"
      run: echo "version=$(./browsers/bin/${{matrix.browser}}-${{matrix.bver}} --version | sed 's/ /_/g')" >> $GITHUB_OUTPUT
      working-directory: .github/workflows/fingerprinting

    - name: Create directory for pcaps
      run: |
        mkdir ./captures/
        touch ./captures/full-capture-${{matrix.browser}}-${{steps.browser.outputs.version}}.pcap
        sudo chown -R root:root ./captures
        ls -lga ./captures
    - name: Start tshark capture
      run: sudo tshark -i any -w ./captures/full-capture-${{matrix.browser}}-${{steps.browser.outputs.version}}.pcap -f "udp" &

    - name: Run webrtc applications with jest/selenium
      run: BROWSER_A=${{matrix.browser}} BROWSER_B=${{matrix.browser}} BVER=${{matrix.bver}} DISPLAY=:99.0 node_modules/.bin/jest --retries=3 test/interop
      working-directory: .github/workflows/fingerprinting

    - name: Kill tshark capture
      run: sudo killall tshark 1> /dev/null 2> /dev/null
      continue-on-error: true

    - name: Filter DTLS handshake in pcap
      run: sudo tshark -r ./captures/full-capture-${{matrix.browser}}-${{steps.browser.outputs.version}}.pcap -Y "dtls.handshake" -w ./captures/capture-${{matrix.browser}}-${{steps.browser.outputs.version}}.pcap

    - name: Archive pcap
      uses: actions/upload-artifact@v4
      with:
        name: fingerprint-pcap-${{matrix.browser}}-${{steps.browser.outputs.version}}.pcap
        path: ./captures/capture-${{matrix.browser}}-${{steps.browser.outputs.version}}.pcap

  commit-fingerprints:
    needs: handshake-capture
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Create fingerprint directory
        run: |
          mkdir -p ./fingerprints
          mkdir -p ${{ runner.temp }}/fingerprints

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/fingerprints
          pattern: fingerprint-pcap-*
          merge-multiple: true

      - name: Install libpcap
        run: sudo apt install libpcap-dev

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Run pcap fingerprint parser
        run: |
          go get .
          go run main.go ${{ runner.temp }}/fingerprints
        working-directory: .github/workflows/fingerprinting

      - name: Move new fingerprints to repo
        run: |
          mv ${{ runner.temp }}/fingerprints/* ./fingerprints/
          ls -R fingerprints

      - name: Run pre lint hook
        if: always()
        run: |
          if [ -f .github/.ci.conf ]; then . .github/.ci.conf; fi
          if [ -n "${PRE_LINT_HOOK}" ]; then ${PRE_LINT_HOOK}; fi

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.57.0
          args: $GOLANGCI_LINT_EXRA_ARGS

      - name: Run E2E tests
        run: |
          docker build -t pion-dtls-e2e -f e2e/Dockerfile .
          docker run -i --rm pion-dtls-e2e

      - name: Commit fingerprints
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add ./fingerprints
          git add ./pkg/mimicry/fingerprints.go
          git commit -m "Add fresh fingerprints"
          git push
